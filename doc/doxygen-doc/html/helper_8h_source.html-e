<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Hardware Locality (hwloc): helper.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="annotated.html"><span>Data&nbsp;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>helper.h</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright © 2009 CNRS, INRIA, Université Bordeaux 1</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright © 2009 Cisco Systems, Inc.  All rights reserved.</span>
<a name="l00004"></a>00004 <span class="comment"> * See COPYING in top-level directory.</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00011"></a>00011 <span class="preprocessor">#ifndef HWLOC_HELPER_H</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span><span class="preprocessor">#define HWLOC_HELPER_H</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="preprocessor">#ifndef HWLOC_H</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><span class="preprocessor">#error Please include the main hwloc.h instead</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;errno.h&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 
<a name="l00032"></a>00032 <span class="keyword">static</span> __inline <span class="keywordtype">unsigned</span>
<a name="l00033"></a><a class="code" href="group__hwlocality__helper__types.html#gaa0835c86ef2ce8c62637d61a1cf134f9">00033</a> <a class="code" href="group__hwlocality__helper__types.html#gaa0835c86ef2ce8c62637d61a1cf134f9" title="Returns the depth of objects of type type or below.">hwloc_get_type_or_below_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type)
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="keywordflow">if</span> (depth != <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a>)
<a name="l00038"></a>00038     <span class="keywordflow">return</span> depth;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="comment">/* find the highest existing level with type order &gt;= */</span>
<a name="l00041"></a>00041   <span class="keywordflow">for</span>(depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, <a class="code" href="group__hwlocality__types.html#ggacd37bb612667dc437d66bfb175a8dc55a5e0ccbbd5922cbb07b53fe892b91b8f2" title="(Logical) Processor. An execution unit (may share a core with some other logical...">HWLOC_OBJ_PROC</a>); ; depth--)
<a name="l00042"></a>00042     <span class="keywordflow">if</span> (<a class="code" href="group__hwlocality__types.html#ga1820ea0dfd8e9dca28f9ea7624df5ae2" title="Compare the depth of two object types.">hwloc_compare_types</a>(<a class="code" href="group__hwlocality__information.html#ga8cc04ad9eb03b0b74d420adf8cc11ad2" title="Returns the type of objects at depth depth.">hwloc_get_depth_type</a>(topology, depth), type) &lt; 0)
<a name="l00043"></a>00043       <span class="keywordflow">return</span> depth+1;
<a name="l00044"></a>00044 
<a name="l00045"></a>00045   <span class="comment">/* Shouldn&apos;t ever happen, as there is always a SYSTEM level with lower order and known depth.  */</span>
<a name="l00046"></a>00046   abort();
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00055"></a>00055 <span class="keyword">static</span> __inline <span class="keywordtype">unsigned</span>
<a name="l00056"></a><a class="code" href="group__hwlocality__helper__types.html#ga65a1d8f1012cb500817893ef848bc3f1">00056</a> <a class="code" href="group__hwlocality__helper__types.html#ga65a1d8f1012cb500817893ef848bc3f1" title="Returns the depth of objects of type type or above.">hwloc_get_type_or_above_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keywordflow">if</span> (depth != <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a>)
<a name="l00061"></a>00061     <span class="keywordflow">return</span> depth;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="comment">/* find the lowest existing level with type order &lt;= */</span>
<a name="l00064"></a>00064   <span class="keywordflow">for</span>(depth = 0; ; depth++)
<a name="l00065"></a>00065     <span class="keywordflow">if</span> (<a class="code" href="group__hwlocality__types.html#ga1820ea0dfd8e9dca28f9ea7624df5ae2" title="Compare the depth of two object types.">hwloc_compare_types</a>(<a class="code" href="group__hwlocality__information.html#ga8cc04ad9eb03b0b74d420adf8cc11ad2" title="Returns the type of objects at depth depth.">hwloc_get_depth_type</a>(topology, depth), type) &gt; 0)
<a name="l00066"></a>00066       <span class="keywordflow">return</span> depth-1;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="comment">/* Shouldn&apos;t ever happen, as there is always a PROC level with higher order and known depth.  */</span>
<a name="l00069"></a>00069   abort();
<a name="l00070"></a>00070 }
<a name="l00071"></a>00071 
<a name="l00081"></a>00081 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00082"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#gab39658e42f1046db0f8870a0d0ba9f42">00082</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#gab39658e42f1046db0f8870a0d0ba9f42" title="Returns the top-object of the topology-tree. Its type is HWLOC_OBJ_SYSTEM.">hwloc_get_system_obj</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__traversal.html#gabf8a98ad085460a4982cc7b74c344b71" title="Returns the topology object at index index from depth depth.">hwloc_get_obj_by_depth</a> (topology, 0, 0);
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00091"></a>00091 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00092"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#ga5755cecb9124c5181642ac84dc5bc554">00092</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga5755cecb9124c5181642ac84dc5bc554" title="Returns the next object at depth depth.">hwloc_get_next_obj_by_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <span class="keywordtype">unsigned</span> depth, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keywordflow">if</span> (!prev)
<a name="l00095"></a>00095     <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__traversal.html#gabf8a98ad085460a4982cc7b74c344b71" title="Returns the topology object at index index from depth depth.">hwloc_get_obj_by_depth</a> (topology, depth, 0);
<a name="l00096"></a>00096   <span class="keywordflow">if</span> (prev-&gt;<a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a> != depth)
<a name="l00097"></a>00097     <span class="keywordflow">return</span> NULL;
<a name="l00098"></a>00098   <span class="keywordflow">return</span> prev-&gt;<a class="code" href="structhwloc__obj.html#a85a788017457129589318b6c39451acf" title="Next object of same type.">next_cousin</a>;
<a name="l00099"></a>00099 }
<a name="l00100"></a>00100 
<a name="l00107"></a>00107 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00108"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#gad011fce572551516267de3c57241a326">00108</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#gad011fce572551516267de3c57241a326" title="Returns the next object of type type.">hwloc_get_next_obj_by_type</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type,
<a name="l00109"></a>00109                    <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00112"></a>00112   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a> || depth == <a class="code" href="group__hwlocality__information.html#ga64c80d3e0501b321d217b1642d68e23d" title="Objects of given type exist at different depth in the topology.">HWLOC_TYPE_DEPTH_MULTIPLE</a>)
<a name="l00113"></a>00113     <span class="keywordflow">return</span> NULL;
<a name="l00114"></a>00114   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga5755cecb9124c5181642ac84dc5bc554" title="Returns the next object at depth depth.">hwloc_get_next_obj_by_depth</a> (topology, depth, prev);
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00121"></a>00121 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00122"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#ga3727d1e62843468ad3796fae52881512">00122</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga3727d1e62843468ad3796fae52881512" title="Return the next child.">hwloc_get_next_child</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> father, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124   <span class="keywordflow">if</span> (!prev)
<a name="l00125"></a>00125     <span class="keywordflow">return</span> father-&gt;<a class="code" href="structhwloc__obj.html#af51d08a0a79dba517c06c5afedc8d2dc" title="First child.">first_child</a>;
<a name="l00126"></a>00126   <span class="keywordflow">if</span> (prev-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a> != father)
<a name="l00127"></a>00127     <span class="keywordflow">return</span> NULL;
<a name="l00128"></a>00128   <span class="keywordflow">return</span> prev-&gt;<a class="code" href="structhwloc__obj.html#a7f2343ed476fe4942e6fffd4cade1b40" title="Next object below the same father.">next_sibling</a>;
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00133"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#ga58ba3d31ed79e7a1a47909824489d317">00133</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga58ba3d31ed79e7a1a47909824489d317" title="Returns the common father object to objects lvl1 and lvl2.">hwloc_get_common_ancestor_obj</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj1, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj2)
<a name="l00134"></a>00134 {
<a name="l00135"></a>00135   <span class="keywordflow">while</span> (obj1-&gt;<a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a> &gt; obj2-&gt;<a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a>)
<a name="l00136"></a>00136     obj1 = obj1-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00137"></a>00137   <span class="keywordflow">while</span> (obj2-&gt;<a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a> &gt; obj1-&gt;<a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a>)
<a name="l00138"></a>00138     obj2 = obj2-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00139"></a>00139   <span class="keywordflow">while</span> (obj1 != obj2) {
<a name="l00140"></a>00140     obj1 = obj1-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00141"></a>00141     obj2 = obj2-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00142"></a>00142   }
<a name="l00143"></a>00143   <span class="keywordflow">return</span> obj1;
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00148"></a>00148 <span class="keyword">static</span> __inline <span class="keywordtype">int</span>
<a name="l00149"></a><a class="code" href="group__hwlocality__helper__traversal__basic.html#ga810bf401a37f879f864aa1ab9d10b12f">00149</a> <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga810bf401a37f879f864aa1ab9d10b12f" title="Returns true if _obj_ is inside the subtree beginning with subtree_root.">hwloc_obj_is_in_subtree</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> subtree_root)
<a name="l00150"></a>00150 {
<a name="l00151"></a>00151   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(obj-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, subtree_root-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>);
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00166"></a>00166 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="group__hwlocality__helper__find__inside.html#ga762bf572ecf691ad812977ce29496ac2" title="Get the set of largest objects covering exactly a given cpuset set.">hwloc_get_largest_objs_inside_cpuset</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00167"></a>00167                                                  <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> * __hwloc_restrict objs, <span class="keywordtype">int</span> max);
<a name="l00168"></a>00168 
<a name="l00175"></a>00175 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00176"></a><a class="code" href="group__hwlocality__helper__find__inside.html#ga9f0cdb50962d59220a557757278e1919">00176</a> <a class="code" href="group__hwlocality__helper__find__inside.html#ga9f0cdb50962d59220a557757278e1919" title="Return the next object at depth depth included in CPU set set.">hwloc_get_next_obj_inside_cpuset_by_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00177"></a>00177                                            <span class="keywordtype">unsigned</span> depth, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> next = <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga5755cecb9124c5181642ac84dc5bc554" title="Returns the next object at depth depth.">hwloc_get_next_obj_by_depth</a>(topology, depth, prev);
<a name="l00180"></a>00180   <span class="keywordflow">while</span> (next &amp;&amp; !<a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(next-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, <span class="keyword">set</span>))
<a name="l00181"></a>00181     next = next-&gt;<a class="code" href="structhwloc__obj.html#a85a788017457129589318b6c39451acf" title="Next object of same type.">next_cousin</a>;
<a name="l00182"></a>00182   <span class="keywordflow">return</span> next;
<a name="l00183"></a>00183 }
<a name="l00184"></a>00184 
<a name="l00190"></a>00190 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00191"></a><a class="code" href="group__hwlocality__helper__find__inside.html#ga060d4f60652ef68bc25bf83e5db1fdb9">00191</a> <a class="code" href="group__hwlocality__helper__find__inside.html#ga060d4f60652ef68bc25bf83e5db1fdb9" title="Return the next object of type type included in CPU set set.">hwloc_get_next_obj_inside_cpuset_by_type</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00192"></a>00192                                           <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00193"></a>00193 {
<a name="l00194"></a>00194   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00195"></a>00195   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a> || depth == <a class="code" href="group__hwlocality__information.html#ga64c80d3e0501b321d217b1642d68e23d" title="Objects of given type exist at different depth in the topology.">HWLOC_TYPE_DEPTH_MULTIPLE</a>)
<a name="l00196"></a>00196     <span class="keywordflow">return</span> NULL;
<a name="l00197"></a>00197   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__helper__find__inside.html#ga9f0cdb50962d59220a557757278e1919" title="Return the next object at depth depth included in CPU set set.">hwloc_get_next_obj_inside_cpuset_by_depth</a>(topology, <span class="keyword">set</span>, depth, prev);
<a name="l00198"></a>00198 }
<a name="l00199"></a>00199 
<a name="l00202"></a>00202 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00203"></a><a class="code" href="group__hwlocality__helper__find__inside.html#gad9b35f0fb89f3bb90edb11c35e7d5683">00203</a> <a class="code" href="group__hwlocality__helper__find__inside.html#gad9b35f0fb89f3bb90edb11c35e7d5683" title="Return the index -th object at depth depth included in CPU set set.">hwloc_get_obj_inside_cpuset_by_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00204"></a>00204                                       <span class="keywordtype">unsigned</span> depth, <span class="keywordtype">unsigned</span> idx)
<a name="l00205"></a>00205 {
<a name="l00206"></a>00206   <span class="keywordtype">int</span> count = 0;
<a name="l00207"></a>00207   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj = <a class="code" href="group__hwlocality__traversal.html#gabf8a98ad085460a4982cc7b74c344b71" title="Returns the topology object at index index from depth depth.">hwloc_get_obj_by_depth</a> (topology, depth, 0);
<a name="l00208"></a>00208   <span class="keywordflow">while</span> (obj) {
<a name="l00209"></a>00209     <span class="keywordflow">if</span> (<a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(obj-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, <span class="keyword">set</span>)) {
<a name="l00210"></a>00210       <span class="keywordflow">if</span> (count == idx)
<a name="l00211"></a>00211         <span class="keywordflow">return</span> obj;
<a name="l00212"></a>00212       count++;
<a name="l00213"></a>00213     }
<a name="l00214"></a>00214     obj = obj-&gt;<a class="code" href="structhwloc__obj.html#a85a788017457129589318b6c39451acf" title="Next object of same type.">next_cousin</a>;
<a name="l00215"></a>00215   }
<a name="l00216"></a>00216   <span class="keywordflow">return</span> NULL;
<a name="l00217"></a>00217 }
<a name="l00218"></a>00218 
<a name="l00224"></a>00224 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00225"></a><a class="code" href="group__hwlocality__helper__find__inside.html#gafcb8f93a01a688d7772332b3ce543f6a">00225</a> <a class="code" href="group__hwlocality__helper__find__inside.html#gafcb8f93a01a688d7772332b3ce543f6a" title="Return the idx -th object of type type included in CPU set set.">hwloc_get_obj_inside_cpuset_by_type</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00226"></a>00226                                      <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type, <span class="keywordtype">unsigned</span> idx)
<a name="l00227"></a>00227 {
<a name="l00228"></a>00228   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00229"></a>00229   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a> || depth == <a class="code" href="group__hwlocality__information.html#ga64c80d3e0501b321d217b1642d68e23d" title="Objects of given type exist at different depth in the topology.">HWLOC_TYPE_DEPTH_MULTIPLE</a>)
<a name="l00230"></a>00230     <span class="keywordflow">return</span> NULL;
<a name="l00231"></a>00231   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__helper__find__inside.html#gad9b35f0fb89f3bb90edb11c35e7d5683" title="Return the index -th object at depth depth included in CPU set set.">hwloc_get_obj_inside_cpuset_by_depth</a>(topology, <span class="keyword">set</span>, depth, idx);
<a name="l00232"></a>00232 }
<a name="l00233"></a>00233 
<a name="l00235"></a>00235 <span class="keyword">static</span> __inline <span class="keywordtype">unsigned</span>
<a name="l00236"></a><a class="code" href="group__hwlocality__helper__find__inside.html#gace5af1ea003c8269566b6726fade7b32">00236</a> <a class="code" href="group__hwlocality__helper__find__inside.html#gace5af1ea003c8269566b6726fade7b32" title="Return the number of objects at depth depth included in CPU set set.">hwloc_get_nbobjs_inside_cpuset_by_depth</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00237"></a>00237                                          <span class="keywordtype">unsigned</span> depth)
<a name="l00238"></a>00238 {
<a name="l00239"></a>00239   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj = <a class="code" href="group__hwlocality__traversal.html#gabf8a98ad085460a4982cc7b74c344b71" title="Returns the topology object at index index from depth depth.">hwloc_get_obj_by_depth</a> (topology, depth, 0);
<a name="l00240"></a>00240   <span class="keywordtype">int</span> count = 0;
<a name="l00241"></a>00241   <span class="keywordflow">while</span> (obj) {
<a name="l00242"></a>00242     <span class="keywordflow">if</span> (<a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(obj-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, <span class="keyword">set</span>))
<a name="l00243"></a>00243       count++;
<a name="l00244"></a>00244     obj = obj-&gt;<a class="code" href="structhwloc__obj.html#a85a788017457129589318b6c39451acf" title="Next object of same type.">next_cousin</a>;
<a name="l00245"></a>00245   }
<a name="l00246"></a>00246   <span class="keywordflow">return</span> count;
<a name="l00247"></a>00247 }
<a name="l00248"></a>00248 
<a name="l00254"></a>00254 <span class="keyword">static</span> __inline <span class="keywordtype">int</span>
<a name="l00255"></a><a class="code" href="group__hwlocality__helper__find__inside.html#ga7e44cec58c6bdb681400a52d007d2597">00255</a> <a class="code" href="group__hwlocality__helper__find__inside.html#ga7e44cec58c6bdb681400a52d007d2597" title="Return the number of objects of type type included in CPU set set.">hwloc_get_nbobjs_inside_cpuset_by_type</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00256"></a>00256                                         <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> type)
<a name="l00257"></a>00257 {
<a name="l00258"></a>00258   <span class="keywordtype">int</span> depth = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00259"></a>00259   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a>)
<a name="l00260"></a>00260     <span class="keywordflow">return</span> 0;
<a name="l00261"></a>00261   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga64c80d3e0501b321d217b1642d68e23d" title="Objects of given type exist at different depth in the topology.">HWLOC_TYPE_DEPTH_MULTIPLE</a>)
<a name="l00262"></a>00262     <span class="keywordflow">return</span> -1; <span class="comment">/* FIXME: agregate nbobjs from different levels? */</span>
<a name="l00263"></a>00263   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__helper__find__inside.html#gace5af1ea003c8269566b6726fade7b32" title="Return the number of objects at depth depth included in CPU set set.">hwloc_get_nbobjs_inside_cpuset_by_depth</a>(topology, <span class="keyword">set</span>, depth);
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00278"></a>00278 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00279"></a><a class="code" href="group__hwlocality__helper__find__covering.html#ga8f38a876af68365766fff3785bc6a201">00279</a> <a class="code" href="group__hwlocality__helper__find__covering.html#ga8f38a876af68365766fff3785bc6a201" title="Get the child covering at least CPU set set.">hwloc_get_child_covering_cpuset</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00280"></a>00280                                 <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> father)
<a name="l00281"></a>00281 {
<a name="l00282"></a>00282   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> child = father-&gt;<a class="code" href="structhwloc__obj.html#af51d08a0a79dba517c06c5afedc8d2dc" title="First child.">first_child</a>;
<a name="l00283"></a>00283   <span class="keywordflow">while</span> (child) {
<a name="l00284"></a>00284     <span class="keywordflow">if</span> (<a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(<span class="keyword">set</span>, child-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>))
<a name="l00285"></a>00285       <span class="keywordflow">return</span> child;
<a name="l00286"></a>00286     child = child-&gt;<a class="code" href="structhwloc__obj.html#a7f2343ed476fe4942e6fffd4cade1b40" title="Next object below the same father.">next_sibling</a>;
<a name="l00287"></a>00287   }
<a name="l00288"></a>00288   <span class="keywordflow">return</span> NULL;
<a name="l00289"></a>00289 }
<a name="l00290"></a>00290 
<a name="l00295"></a>00295 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00296"></a><a class="code" href="group__hwlocality__helper__find__covering.html#gaf495236e86281fedf1fda14f1e1a8ce4">00296</a> <a class="code" href="group__hwlocality__helper__find__covering.html#gaf495236e86281fedf1fda14f1e1a8ce4" title="Get the lowest object covering at least CPU set set.">hwloc_get_obj_covering_cpuset</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>)
<a name="l00297"></a>00297 {
<a name="l00298"></a>00298   <span class="keyword">struct </span><a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj</a> *current = <a class="code" href="group__hwlocality__helper__traversal__basic.html#gab39658e42f1046db0f8870a0d0ba9f42" title="Returns the top-object of the topology-tree. Its type is HWLOC_OBJ_SYSTEM.">hwloc_get_system_obj</a>(topology);
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   <span class="keywordflow">if</span> (!<a class="code" href="group__hwlocality__cpuset.html#ga59a0cb0bbe3b32945768a06264891035" title="Test whether set sub_set is part of set super_set.">hwloc_cpuset_isincluded</a>(<span class="keyword">set</span>, current-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>))
<a name="l00301"></a>00301     <span class="keywordflow">return</span> NULL;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303   <span class="keywordflow">while</span> (1) {
<a name="l00304"></a>00304     <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> child = <a class="code" href="group__hwlocality__helper__find__covering.html#ga8f38a876af68365766fff3785bc6a201" title="Get the child covering at least CPU set set.">hwloc_get_child_covering_cpuset</a>(topology, <span class="keyword">set</span>, current);
<a name="l00305"></a>00305     <span class="keywordflow">if</span> (!child)
<a name="l00306"></a>00306       <span class="keywordflow">return</span> current;
<a name="l00307"></a>00307     current = child;
<a name="l00308"></a>00308   }
<a name="l00309"></a>00309 }
<a name="l00310"></a>00310 
<a name="l00311"></a>00311 
<a name="l00327"></a>00327 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00328"></a><a class="code" href="group__hwlocality__helper__find__coverings.html#ga39cbd3f1608d0fe503d396430cffe219">00328</a> <a class="code" href="group__hwlocality__helper__find__coverings.html#ga39cbd3f1608d0fe503d396430cffe219" title="Iterate through same-depth objects covering at least CPU set set.">hwloc_get_next_obj_covering_cpuset_by_depth</a>(<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00329"></a>00329                                             <span class="keywordtype">unsigned</span> <a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a>, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> next = <a class="code" href="group__hwlocality__helper__traversal__basic.html#ga5755cecb9124c5181642ac84dc5bc554" title="Returns the next object at depth depth.">hwloc_get_next_obj_by_depth</a>(topology, depth, prev);
<a name="l00332"></a>00332   <span class="keywordflow">while</span> (next &amp;&amp; !<a class="code" href="group__hwlocality__cpuset.html#ga7f9ed2d6373d6c1b4f697b4c14ff1dc4" title="Test whether sets set1 and set2 intersects.">hwloc_cpuset_intersects</a>(<span class="keyword">set</span>, next-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>))
<a name="l00333"></a>00333     next = next-&gt;<a class="code" href="structhwloc__obj.html#a85a788017457129589318b6c39451acf" title="Next object of same type.">next_cousin</a>;
<a name="l00334"></a>00334   <span class="keywordflow">return</span> next;
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00348"></a>00348 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00349"></a><a class="code" href="group__hwlocality__helper__find__coverings.html#gaad89905a7c9388283535296802d766cb">00349</a> <a class="code" href="group__hwlocality__helper__find__coverings.html#gaad89905a7c9388283535296802d766cb" title="Iterate through same-type objects covering at least CPU set set.">hwloc_get_next_obj_covering_cpuset_by_type</a>(<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>,
<a name="l00350"></a>00350                                            <a class="code" href="group__hwlocality__types.html#gacd37bb612667dc437d66bfb175a8dc55" title="Type of topology object.">hwloc_obj_type_t</a> <a class="code" href="structhwloc__obj.html#acc4f0803f244867e68fe0036800be5de" title="Type of object.">type</a>, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> prev)
<a name="l00351"></a>00351 {
<a name="l00352"></a>00352   <span class="keywordtype">int</span> <a class="code" href="structhwloc__obj.html#a9d82690370275d42d652eccdea5d3ee5" title="Vertical index in the hierarchy.">depth</a> = <a class="code" href="group__hwlocality__information.html#ga8bec782e21be313750da70cf7428b374" title="Returns the depth of objects of type type.">hwloc_get_type_depth</a>(topology, type);
<a name="l00353"></a>00353   <span class="keywordflow">if</span> (depth == <a class="code" href="group__hwlocality__information.html#ga9e86ce528f626330de2da7adb6c4e02e" title="No object of given type exists in the topology.">HWLOC_TYPE_DEPTH_UNKNOWN</a> || depth == <a class="code" href="group__hwlocality__information.html#ga64c80d3e0501b321d217b1642d68e23d" title="Objects of given type exist at different depth in the topology.">HWLOC_TYPE_DEPTH_MULTIPLE</a>)
<a name="l00354"></a>00354     <span class="keywordflow">return</span> NULL;
<a name="l00355"></a>00355   <span class="keywordflow">return</span> <a class="code" href="group__hwlocality__helper__find__coverings.html#ga39cbd3f1608d0fe503d396430cffe219" title="Iterate through same-depth objects covering at least CPU set set.">hwloc_get_next_obj_covering_cpuset_by_depth</a>(topology, <span class="keyword">set</span>, depth, prev);
<a name="l00356"></a>00356 }
<a name="l00357"></a>00357 
<a name="l00370"></a>00370 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00371"></a><a class="code" href="group__hwlocality__helper__find__cache.html#ga5e56e841b6887dc596214965d379781e">00371</a> <a class="code" href="group__hwlocality__helper__find__cache.html#ga5e56e841b6887dc596214965d379781e" title="Get the first cache covering a cpuset set.">hwloc_get_cache_covering_cpuset</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> <span class="keyword">set</span>)
<a name="l00372"></a>00372 {
<a name="l00373"></a>00373   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> current = <a class="code" href="group__hwlocality__helper__find__covering.html#gaf495236e86281fedf1fda14f1e1a8ce4" title="Get the lowest object covering at least CPU set set.">hwloc_get_obj_covering_cpuset</a>(topology, <span class="keyword">set</span>);
<a name="l00374"></a>00374   <span class="keywordflow">while</span> (current) {
<a name="l00375"></a>00375     <span class="keywordflow">if</span> (current-&gt;<a class="code" href="structhwloc__obj.html#acc4f0803f244867e68fe0036800be5de" title="Type of object.">type</a> == <a class="code" href="group__hwlocality__types.html#ggacd37bb612667dc437d66bfb175a8dc55a56ee0b7eca88f363b75b34fdde8c9ddc" title="Data cache. Can be L1, L2, L3, ...">HWLOC_OBJ_CACHE</a>)
<a name="l00376"></a>00376       <span class="keywordflow">return</span> current;
<a name="l00377"></a>00377     current = current-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00378"></a>00378   }
<a name="l00379"></a>00379   <span class="keywordflow">return</span> NULL;
<a name="l00380"></a>00380 }
<a name="l00381"></a>00381 
<a name="l00386"></a>00386 <span class="keyword">static</span> __inline <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a>
<a name="l00387"></a><a class="code" href="group__hwlocality__helper__find__cache.html#gaefe0e3eda6f6bfb9bdcd9c62f4e88066">00387</a> <a class="code" href="group__hwlocality__helper__find__cache.html#gaefe0e3eda6f6bfb9bdcd9c62f4e88066" title="Get the first cache shared between an object and somebody else.">hwloc_get_shared_cache_covering_obj</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> obj)
<a name="l00388"></a>00388 {
<a name="l00389"></a>00389   <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> current = obj-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00390"></a>00390   <span class="keywordflow">while</span> (current) {
<a name="l00391"></a>00391     <span class="keywordflow">if</span> (!<a class="code" href="group__hwlocality__cpuset.html#ga817f53201f0c04b12db42c562cd64993" title="Test whether set set1 is equal to set set2.">hwloc_cpuset_isequal</a>(current-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, obj-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>)
<a name="l00392"></a>00392         &amp;&amp; current-&gt;<a class="code" href="structhwloc__obj.html#acc4f0803f244867e68fe0036800be5de" title="Type of object.">type</a> == <a class="code" href="group__hwlocality__types.html#ggacd37bb612667dc437d66bfb175a8dc55a56ee0b7eca88f363b75b34fdde8c9ddc" title="Data cache. Can be L1, L2, L3, ...">HWLOC_OBJ_CACHE</a>)
<a name="l00393"></a>00393       <span class="keywordflow">return</span> current;
<a name="l00394"></a>00394     current = current-&gt;<a class="code" href="structhwloc__obj.html#a5fb4d37969f7e132cbd8040df2139dc8" title="Father, NULL if root (system object).">father</a>;
<a name="l00395"></a>00395   }
<a name="l00396"></a>00396   <span class="keywordflow">return</span> NULL;
<a name="l00397"></a>00397 }
<a name="l00398"></a>00398 
<a name="l00414"></a>00414 <span class="comment">/* TODO: rather provide an iterator? Provide a way to know how much should be allocated? By returning the total number of objects instead? */</span>
<a name="l00415"></a>00415 <span class="keyword">extern</span> <span class="keywordtype">int</span> <a class="code" href="group__hwlocality__helper__traversal.html#gab761df678cab3699bd1a1d057e98bf1b" title="Do a depth-first traversal of the topology to find and sort.">hwloc_get_closest_objs</a> (<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> src, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> * __hwloc_restrict objs, <span class="keywordtype">int</span> max);
<a name="l00416"></a>00416 
<a name="l00437"></a>00437 <span class="keyword">static</span> __inline <span class="keywordtype">void</span>
<a name="l00438"></a><a class="code" href="group__hwlocality__helper__binding.html#gaea68e92b026930cf5c368e2d98cb6aac">00438</a> <a class="code" href="group__hwlocality__helper__binding.html#gaea68e92b026930cf5c368e2d98cb6aac" title="Distribute n items over the topology under root.">hwloc_distribute</a>(<a class="code" href="group__hwlocality__topology.html#ga9d1e76ee15a7dee158b786c30b6a6e38" title="Topology context.">hwloc_topology_t</a> topology, <a class="code" href="structhwloc__obj.html" title="Structure of a topology object.">hwloc_obj_t</a> root, <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> *<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>, <span class="keywordtype">int</span> n)
<a name="l00439"></a>00439 {
<a name="l00440"></a>00440   <span class="keywordtype">int</span> i;
<a name="l00441"></a>00441   <span class="keywordtype">int</span> chunk_size, complete_chunks;
<a name="l00442"></a>00442   <a class="code" href="group__hwlocality__cpuset.html#ga7366332f7090f5b54d4b25a0c2c4b411" title="Set of CPUs represented as an opaque pointer to an internal bitmask.">hwloc_cpuset_t</a> *cpusetp;
<a name="l00443"></a>00443 
<a name="l00444"></a>00444   <span class="keywordflow">if</span> (!root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a> || n == 1) {
<a name="l00445"></a>00445     <span class="comment">/* Got to the bottom, we can&apos;t split any more, put everything there.  */</span>
<a name="l00446"></a>00446     <span class="keywordflow">for</span> (i=0; i&lt;n; i++)
<a name="l00447"></a>00447       cpuset[i] = <a class="code" href="group__hwlocality__cpuset.html#ga19d8c163e4834ba69c808560aa5a89b3" title="Duplicate CPU set set by allocating a new CPU set and copying its contents.">hwloc_cpuset_dup</a>(root-&gt;<a class="code" href="structhwloc__obj.html#a67925e0f2c47f50408fbdb9bddd0790f" title="CPUs covered by this object.">cpuset</a>);
<a name="l00448"></a>00448     <span class="keywordflow">return</span>;
<a name="l00449"></a>00449   }
<a name="l00450"></a>00450 
<a name="l00451"></a>00451   <span class="comment">/* Divide n in root-&gt;arity chunks.  */</span>
<a name="l00452"></a>00452   chunk_size = (n + root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a> - 1) / root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a>;
<a name="l00453"></a>00453   complete_chunks = n % root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a>;
<a name="l00454"></a>00454   if (!complete_chunks)
<a name="l00455"></a>00455     complete_chunks = root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a>;
<a name="l00456"></a>00456 
<a name="l00457"></a>00457   <span class="comment">/* Allocate complete chunks first.  */</span>
<a name="l00458"></a>00458   <span class="keywordflow">for</span> (cpusetp = cpuset, i = 0;
<a name="l00459"></a>00459        i &lt; complete_chunks;
<a name="l00460"></a>00460        i ++, cpusetp += chunk_size)
<a name="l00461"></a>00461     <a class="code" href="group__hwlocality__helper__binding.html#gaea68e92b026930cf5c368e2d98cb6aac" title="Distribute n items over the topology under root.">hwloc_distribute</a>(topology, root-&gt;<a class="code" href="structhwloc__obj.html#a04d05403da37bfe17cd63b7c7dd07b1f" title="Children, children[0 .. arity -1].">children</a>[i], cpusetp, chunk_size);
<a name="l00462"></a>00462 
<a name="l00463"></a>00463   <span class="comment">/* Now allocate not-so-complete chunks.  */</span>
<a name="l00464"></a>00464   <span class="keywordflow">for</span> ( ;
<a name="l00465"></a>00465        i &lt; root-&gt;<a class="code" href="structhwloc__obj.html#aac3f6da35c9b57599909a44ce2b716c1" title="Number of children.">arity</a>;
<a name="l00466"></a>00466        i++, cpusetp += chunk_size-1)
<a name="l00467"></a>00467     <a class="code" href="group__hwlocality__helper__binding.html#gaea68e92b026930cf5c368e2d98cb6aac" title="Distribute n items over the topology under root.">hwloc_distribute</a>(topology, root-&gt;<a class="code" href="structhwloc__obj.html#a04d05403da37bfe17cd63b7c7dd07b1f" title="Children, children[0 .. arity -1].">children</a>[i], cpusetp, chunk_size-1);
<a name="l00468"></a>00468 }
<a name="l00469"></a>00469 
<a name="l00472"></a>00472 <span class="preprocessor">#endif </span><span class="comment">/* HWLOC_HELPER_H */</span>
</pre></div></div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Tue Nov 24 11:55:11 2009 for Hardware Locality (hwloc) by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
