.TH "Binding Helpers" 3 "Thu Dec 16 2010" "Version 1.1" "Hardware Locality (hwloc)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Binding Helpers \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "static __hwloc_inline void \fBhwloc_distributev\fP (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fP *root, unsigned n_roots, \fBhwloc_cpuset_t\fP *cpuset, unsigned n, unsigned until)"
.br
.RI "\fIDistribute \fCn\fP items over the topology under \fCroot\fP. \fP"
.ti -1c
.RI "static __hwloc_inline void \fBhwloc_distribute\fP (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fP root, \fBhwloc_cpuset_t\fP *cpuset, unsigned n, unsigned until)"
.br
.ti -1c
.RI "static __hwloc_inline void * \fBhwloc_alloc_membind_policy_nodeset\fP (\fBhwloc_topology_t\fP topology, size_t len, \fBhwloc_const_nodeset_t\fP nodeset, \fBhwloc_membind_policy_t\fP policy, int flags)"
.br
.RI "\fIAllocate some memory on the given nodeset \fCnodeset\fP. \fP"
.ti -1c
.RI "static __hwloc_inline void * \fBhwloc_alloc_membind_policy\fP (\fBhwloc_topology_t\fP topology, size_t len, \fBhwloc_const_cpuset_t\fP cpuset, \fBhwloc_membind_policy_t\fP policy, int flags)"
.br
.RI "\fIAllocate some memory on the memory nodes near given cpuset \fCcpuset\fP. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "static __hwloc_inline void* hwloc_alloc_membind_policy (\fBhwloc_topology_t\fP topology, size_t len, \fBhwloc_const_cpuset_t\fP cpuset, \fBhwloc_membind_policy_t\fP policy, int flags)\fC [static]\fP"
.PP
Allocate some memory on the memory nodes near given cpuset \fCcpuset\fP. This is similar to hwloc_alloc_membind_policy_nodeset, but for a given cpuset. 
.SS "static __hwloc_inline void* hwloc_alloc_membind_policy_nodeset (\fBhwloc_topology_t\fP topology, size_t len, \fBhwloc_const_nodeset_t\fP nodeset, \fBhwloc_membind_policy_t\fP policy, int flags)\fC [static]\fP"
.PP
Allocate some memory on the given nodeset \fCnodeset\fP. This is similar to hwloc_alloc_membind except that it is allowed to change the current memory binding policy, thus providing more binding support, at the expense of changing the current state. 
.SS "static __hwloc_inline void hwloc_distribute (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fP root, \fBhwloc_cpuset_t\fP * cpuset, unsigned n, unsigned until)\fC [static]\fP"
.SS "static __hwloc_inline void hwloc_distributev (\fBhwloc_topology_t\fP topology, \fBhwloc_obj_t\fP * roots, unsigned n_roots, \fBhwloc_cpuset_t\fP * cpuset, unsigned n, unsigned until)\fC [static]\fP"
.PP
Distribute \fCn\fP items over the topology under \fCroot\fP. Distribute \fCn\fP items over the topology under \fCroots\fP.
.PP
Array \fCcpuset\fP will be filled with \fCn\fP cpusets recursively distributed linearly over the topology under \fCroot\fP, down to depth \fCuntil\fP (which can be MAX_INT to distribute down to the finest level).
.PP
This is typically useful when an application wants to distribute \fCn\fP threads over a machine, giving each of them as much private cache as possible and keeping them locally in number order.
.PP
The caller may typically want to also call \fBhwloc_bitmap_singlify()\fP before binding a thread so that it does not move at all.
.PP
This is the same as hwloc_distribute, but takes an array of roots instead of just one root. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Hardware Locality (hwloc) from the source code.
